##
## This is the configuration file for WebTunnelAgent.
##

#
# WebTunnel Configuration
#

# The domain UUID is used to group devices and associate them with user accounts.
# This must be set to a domain UUID that the user has access to.
webtunnel.domain = 00000000-0000-0000-0000-000000000000

# The tenant UUID is used to associate a device with a tenant. Only required if
# the macchina.io REMOTE server configuration requires it.
# webtunnel.tenant = 00000000-0000-0000-0000-000000000000

# The device ID will be used to address the device and must
# be unique. We use the system's Ethernet address as part
# of the ID (${system.nodeId}).
webtunnel.deviceId = c9eebed5-8705-4763-8822-${system.nodeId}

# Uncomment the following to set the device 'name' property shown in the
# reflector server dashboard and device page.
# Note that if enabled, this will cause the device name property to be
# set every time WebTunnelAgent connects to the reflector server, therefore
# overwriting any changes made in the reflector server web interface, shell
# or API. You can specify a name, or use a configuration variable like
# ${system.nodeName} or refer to an environment variable like
# ${system.env.HOSTNAME}.
# webtunnel.deviceName = ${system.nodeName}

# Uncomment the following to set the device 'version' property every time
# WebTunnelAgent connects to the reflector server.
# webtunnel.deviceVersion = 1.0.0

# The IP address or domain name of the target device.
webtunnel.host = 127.0.0.1

# A comma-separated list of port numbers to forward.
# Should include the port number of the device's web server
# (usually 80, but can be another one). Can also include
# SSH (22) or other TCP ports.
webtunnel.ports = 80

# The port number of the device's web server. Must only be
# set if different from default HTTP port 80. Must also
# be included in above webtunnel.ports list.
# If the web server requires HTTPS, set this to the
# HTTPS port number (e.g., 443) and set webtunnel.https.enable
# to true.
webtunnel.httpPort = 80

# Set to true if web server (webtunnel.httpPort) requires HTTPS.
webtunnel.https.enable = false

# The port number of the device's SSH server.
# Used to enable SSH support in the macchina.io REMOTE web
# interface, via macchina.io REMOTE Helper.
# Must also be included in above webtunnel.ports list.
# webtunnel.sshPort = 22

# The port number of the device's VNC server.
# Used to enable VNC support in the macchina.io REMOTE web
# interface, via built-in noVNC or macchina.io REMOTE Helper.
# Must also be included in above webtunnel.ports list.
# webtunnel.vncPort = 5900

# The port number of the device's RDP server.
# Used to enable RDP support in the macchina.io REMOTE web
# interface, via macchina.io REMOTE Helper.
# Must also be included in above webtunnel.ports list.
# webtunnel.rdpPort = 3389

# The port number of the device's application protocol server.
# This can be used for protocols like Modbus/TCP (502),
# OPC-UA (4840) or custom application protocols.
# Used to enable transparent TCP forwarding support in the
# macchina.io REMOTE web interface, via macchina.io REMOTE Helper.
# Must also be included in above webtunnel.ports list.
# webtunnel.appPort = 1234

# The URL of the reflector server.
# If your WebTunnelAgent build does not support SSL/TLS,
# replace https with http. The connection between device
# and reflector server will not be secure in that case.
webtunnel.reflectorURI = https://remote.macchina.io

# The username of the device. Consists of device ID and
# domain UUID, separated by '@'. Should not be changed.
webtunnel.username = ${webtunnel.deviceId}@${webtunnel.domain}

# The device password, used for authenticating the device.
# Device authentication is disabled on the demo server,
# so any password given here will be ignored.
webtunnel.password =

# The timeout (seconds) for connecting to the local (forwarded) server socket.
webtunnel.connectTimeout = 10

# The timeout (seconds) for local (forwarded) socket connections.
webtunnel.localTimeout = 7200

# The timeout (seconds) for the WebTunnel connection to the reflector server.
webtunnel.remoteTimeout = 300


#
# HTTP Configuration
#

# The timeout (seconds) for the initial HTTP(S) connection to the reflector server.
http.timeout = 30

# Set to true to configure a HTTP proxy.
http.proxy.enable = false

# The domain name of the proxy server.
http.proxy.host = proxy.nowhere.com

# The port of the proxy server.
http.proxy.port = 80

# An alternative form to specify a proxy.
# Note: http.proxy.host and http.proxy.port will take precedence if specified.
# http.proxy.url = http://proxy.nowhere.com:8080

# The username for the proxy server, if required.
http.proxy.username =

# The password for the proxy server, if required.
http.proxy.password =


#
# TLS (OpenSSL) Configuration for macchina.io REMOTE Connection
#

# Enable (true) or disable (false) accepting unknown certificates.
# Note: OpenSSL for Windows does not include a list of trusted
# root certificates, so we set this to false to make it work
# out of the box on Windows. You can set this to true if
# your system has an up-to-date list of trusted root certificates
# that include the GeoTrust Global CA, or if you have your own file
# or directory of valid root certificates specified in tls.caLocation.
tls.acceptUnknownCertificate = false

# List of supported OpenSSL ciphers.
tls.ciphers = HIGH:!DSS:!aNULL@STRENGTH

# Server certificate verification mode.
#   - none: no verification
#   - relaxed: verify only if server presents certificate
#   - strict: require valid server certificate
tls.verification = relaxed

# Minimum required Transport Layer Security (TLS) version.
#   - tlsv1 (TLS version 1.0)
#   - tlsv1_1 (TLS version 1.1)
#   - tlsv1_2 (TLS version 1.2, default)
#   - tlsv1_3 (TLS version 1.3)
tls.minVersion = tlsv1_2

# Enable (true) or disable (false) extended (domain name) certificate validation.
tls.extendedCertificateVerification = true

# Directory or file containing trusted OpenSSL root certificates.
# Leave emtpy to use the system's default list.
tls.caLocation =

# List of supported OpenSSL ciphers for HTTPS connection to
# device web server.
webtunnel.https.ciphers = HIGH:!DSS:!aNULL@STRENGTH

# Device web server certificate verification mode.
#   - none: no verification
#   - relaxed: verify only if server presents certificate
#   - strict: require valid server certificate
webtunnel.https.verification = none

# Minimum required Transport Layer Security (TLS) version.
#   - tlsv1 (TLS version 1.0)
#   - tlsv1_1 (TLS version 1.1)
#   - tlsv1_2 (TLS version 1.2, default)
#   - tlsv1_3 (TLS version 1.3)
webtunnel.https.minVersion = tlsv1_2

# Enable (true) or disable (false) extended (domain name) certificate validation.
# for HTTPS connection to device web server.
webtunnel.https.extendedCertificateVerification = false

# Directory or file containing trusted OpenSSL root certificates
# for HTTPS connection to device web server.
# Leave emtpy to use the system's default list.
webtunnel.https.caLocation =


#
# Logging Configuration
#
# See <http://pocoproject.org/slides/110-Logging.pdf>
# and <http://pocoproject.org/slides/185-LoggingConfiguration.pdf>
# for how this works.
#

# Log level should be one of none, debug, information, notice, warning, error, critical or fatal.
logging.loggers.root.level = information

# Use one of the loggers defined further down: console, syslog or file.
logging.loggers.root.channel = console

# Console logging
logging.channels.console.class = ColorConsoleChannel
logging.channels.console.pattern = %Y-%m-%d %H:%M:%S.%i [%p] %s<%I>: %t

# On Linux we can use syslogd for logging.
#logging.channels.syslog.class = SyslogChannel
#logging.channels.syslog.pattern = %s: %t
#logging.channels.syslog.name = webtunnels
#logging.channels.syslog.facility = SYSLOG_LOCAL0

# A log file.
logging.channels.file.class = FileChannel
logging.channels.file.pattern = %Y-%m-%d %H:%M:%S.%i [%p] %s<%I>: %t
logging.channels.file.path = ${application.dir}${application.baseName}.log
logging.channels.file.rotation = 100K
logging.channels.file.archive = number
logging.channels.file.purgeCount = 3
